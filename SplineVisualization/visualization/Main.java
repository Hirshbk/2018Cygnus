package visualization;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class Main {

	private static BufferedImage fieldImage;
	private static BufferedImage splineImagePNG;
	private static BufferedImage combined;
	
	private static void createAndShowUI() {
		
		String splineName = "RightLeftScale"; //name of spline .txt file
		double startX = 22; //start position along the alliance wall in feet
		double startY = 2.5; //start position away from the alliance wall in feet
		
		//creates new window frame
		JFrame frame = new JFrame();
		//generates spline image as .png
		SplineImage splineImage = new SplineImage();
		splineImage.generate(splineName, startX, startY);
		
		//tries to load the field image and the spline image generated by splineImage.generate
		try {
			fieldImage = ImageIO.read(new File("SplineVisualization/FRC2018FieldDiagramHalf.png"));
			File spline_image = new File(splineName + "_Graph.PNG");
		    splineImagePNG = ImageIO.read(spline_image);
		    spline_image.delete();
		} catch (IOException e) {
			System.out.println("image path is wrong");
		}
		
		//these should be the same, but just in case it isn't
		int w = Math.max(fieldImage.getWidth(), splineImagePNG.getWidth());
	    int h = Math.max(fieldImage.getHeight(), splineImagePNG.getHeight());

	    //creates a new combined image
	    combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
		
	    //draws both the field image and the spline image to the combined image
	    Graphics g = combined.getGraphics();
	    g.drawImage(fieldImage, 0, 0, null);
	    g.drawImage(splineImagePNG, 0, 0, null);
	    
	    //adds the image to the jframe and shows the frame
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(new JLabel (new ImageIcon(combined)));
		frame.pack();
		frame.setVisible(true);
	}
	
	public static void main(String[] args) {
		//all the people on stack overflow did this, I don't know what the benefit is but I did it too
		java.awt.EventQueue.invokeLater(new Runnable() {
	         public void run() {
	            createAndShowUI();
	         }
	      });
	}
	
}
